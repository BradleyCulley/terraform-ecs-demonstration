on: push
name: Main Workflow

env:
  FRONTEND_ECR_REPOSITORY: demo-application-frontend
  BACKEND_ECR_REPOSITORY: demo-application-backend

jobs:
  build-and-deploy:
    name: Provision ECR Repositories, Build and Push Backend Image, Build and Push Frontend Image, Deploy Latest Infrastructure, Including Deploying Latest Frontend and Backend Service Images to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # only run on commits to remote main
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: |
          cd infrastructure
          terraform fmt -check

      - name: Create Terraform Remote State S3 Bucket If It Don't Already Exist
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "testing"

      - name: Terraform Init
        id: init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd infrastructure
          terraform validate -no-color

      # Provisioning the ECR repositories so that they're available for first pushes to them
      # that happens in later steps below,
      # when this pipeline runs for the first time.
      # That way, this pipeline can simply be run, after the S3 bucket for remote state, GitHub actions
      # secrets, etc. are set up.
      - name: Create ECR Repositories If They Don't Already Exist
        env:
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd infrastructure
          terraform apply \
          -target=module.ecr_frontend \
          -target=module.ecr_backend \
          -var="image_tag=$IMAGE_TAG" \
          -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
          -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
          -var="aws_region=$AWS_REGION" \
          --auto-approve

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          pwd
          ls -la
          cd backend
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG"

      - name: Setup Node.js environment
        uses: actions/setup-node@v3.3.0

      - name: Build Front Application Files to Build Folder
        run: |
          cd frontend
          npm ci --production
          npm run build || true

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd frontend
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG"

      - name: Terraform Apply
        env:
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run:  |
          cd infrastructure
          terraform apply \
          -var="image_tag=$IMAGE_TAG" \
          -var="aws_access_key_id=$AWS_ACCESS_KEY_ID" \
          -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" \
          -var="aws_region=$AWS_REGION" \
          --auto-approve
